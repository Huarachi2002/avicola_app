// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/models/galpon.dart';
import 'features/models/lote.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2548785174816103977),
      name: 'Galpon',
      lastPropertyId: const IdUid(6, 3837757930415103779),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8917161017853581174),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5349763515142845678),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3507529671108560273),
            name: 'color',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2611600357939126480),
            name: 'CapacidadMax',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2935733824166506217),
            name: 'CapacidadLibre',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3837757930415103779),
            name: 'Cuarentena',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'lotes', srcEntity: 'Lote', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 7112796507575958843),
      name: 'Lote',
      lastPropertyId: const IdUid(5, 1954184729294834520),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1073587931066391167),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6699052718658273339),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3855932548403366937),
            name: 'color',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7724287714258301882),
            name: 'Capacidad',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1954184729294834520),
            name: 'galponId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 7824721528320702321),
            relationTarget: 'Galpon')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 7112796507575958843),
      lastIndexId: const IdUid(1, 7824721528320702321),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Galpon: EntityDefinition<Galpon>(
        model: _entities[0],
        toOneRelations: (Galpon object) => [],
        toManyRelations: (Galpon object) => {
              RelInfo<Lote>.toOneBacklink(
                      5, object.id, (Lote srcObject) => srcObject.galpon):
                  object.lotes
            },
        getId: (Galpon object) => object.id,
        setId: (Galpon object, int id) {
          object.id = id;
        },
        objectToFB: (Galpon object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.color);
          fbb.addInt64(3, object.CapacidadMax);
          fbb.addInt64(4, object.CapacidadLibre);
          fbb.addBool(5, object.Cuarentena);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Galpon(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              color: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              CapacidadMax:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..CapacidadLibre =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..Cuarentena =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          InternalToManyAccess.setRelInfo<Galpon>(
              object.lotes,
              store,
              RelInfo<Lote>.toOneBacklink(
                  5, object.id, (Lote srcObject) => srcObject.galpon));
          return object;
        }),
    Lote: EntityDefinition<Lote>(
        model: _entities[1],
        toOneRelations: (Lote object) => [object.galpon],
        toManyRelations: (Lote object) => {},
        getId: (Lote object) => object.id,
        setId: (Lote object, int id) {
          object.id = id;
        },
        objectToFB: (Lote object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.color);
          fbb.addInt64(3, object.Capacidad);
          fbb.addInt64(4, object.galpon.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Lote(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              color: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              Capacidad:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.galpon.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.galpon.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Galpon] entity fields to define ObjectBox queries.
class Galpon_ {
  /// see [Galpon.id]
  static final id = QueryIntegerProperty<Galpon>(_entities[0].properties[0]);

  /// see [Galpon.name]
  static final name = QueryStringProperty<Galpon>(_entities[0].properties[1]);

  /// see [Galpon.color]
  static final color = QueryIntegerProperty<Galpon>(_entities[0].properties[2]);

  /// see [Galpon.CapacidadMax]
  static final CapacidadMax =
      QueryIntegerProperty<Galpon>(_entities[0].properties[3]);

  /// see [Galpon.CapacidadLibre]
  static final CapacidadLibre =
      QueryIntegerProperty<Galpon>(_entities[0].properties[4]);

  /// see [Galpon.Cuarentena]
  static final Cuarentena =
      QueryBooleanProperty<Galpon>(_entities[0].properties[5]);
}

/// [Lote] entity fields to define ObjectBox queries.
class Lote_ {
  /// see [Lote.id]
  static final id = QueryIntegerProperty<Lote>(_entities[1].properties[0]);

  /// see [Lote.name]
  static final name = QueryStringProperty<Lote>(_entities[1].properties[1]);

  /// see [Lote.color]
  static final color = QueryIntegerProperty<Lote>(_entities[1].properties[2]);

  /// see [Lote.Capacidad]
  static final Capacidad =
      QueryIntegerProperty<Lote>(_entities[1].properties[3]);

  /// see [Lote.galpon]
  static final galpon =
      QueryRelationToOne<Lote, Galpon>(_entities[1].properties[4]);
}
